AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  SAM Template for Pixelogic Teams Generic Chatbot

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - staging
      - prod
  ForceEventBridge:
    Type: String
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'
      - auto
  VpcId:
    Type: String
    Default: ''
  Subnet:
    Type: List<String>
    Default: ''

  SecretName:
    Type: String
    Default: 'pixelbot-chatbot'

  MapMigrationTag:
    Description: Tag value for map-migrated key to be applied to resources.
    Type: String
    Default: mig1TE3UHEWRS
    

Resources:
    GraphSubscriptionFunction:
      Type: AWS::Serverless::Function
      Properties:
        FunctionName: graph_subscription
        CodeUri: functions/graph_subscription/
        Handler: app.handler
        Runtime: python3.10
        Architectures:
          - x86_64
        Timeout: 30
        Environment:
          Variables:
            Region: !Ref AWS::Region
            Secret_Name: !Sub "${SecretName}-${Environment}"
            Notification_URL: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/notifications"
            LifeCycle_URL:  !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/lifecycleNotifications"
        Role:
          !GetAtt LambdaFunctionRole.Arn
        Events:
          ScheduledRule:
            Type: Schedule
            Properties:
              Schedule: rate(70 hours)
        VpcConfig:
          SecurityGroupIds:
              - !GetAtt GenericChatbotSecurityGroup.GroupId
          SubnetIds: !Ref Subnet

    
    ReceiveNotificationsFunction:
      Type: AWS::Serverless::Function
      Properties:
        FunctionName: receive_notification
        CodeUri: functions/receive_notifications/
        Handler: app.handler
        Runtime: python3.10
        Architectures:
          - x86_64
        Timeout: 30  
        Environment:
          Variables:
            Region: !Ref AWS::Region
            Secret_Name: !Sub "${SecretName}-${Environment}"
        Role: !GetAtt LambdaFunctionRole.Arn
        Events:
          NotificationPost:
            Type: Api
            Properties:
              Path: /notifications
              Method: POST
              RestApiId: !Ref ApiGateway
          NotificationGet:
            Type: Api
            Properties:
              Path: /notifications
              Method: GET
              RestApiId: !Ref ApiGateway
        VpcConfig:
          SecurityGroupIds:
            - !GetAtt GenericChatbotSecurityGroup.GroupId
          SubnetIds: !Ref Subnet

    
    ApiGateway:
      Type: AWS::Serverless::Api
      Properties:
        Name: !Sub ${AWS::StackName}-api
        StageName: !Ref Environment
        Tags:
          map-migrated: !Ref MapMigrationTag
        Cors:
          AllowOrigin: "'*'"
          AllowMethods: "'GET,POST'"
        OpenApiVersion: '2.0'
    
    GenericChatbotSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties: 
        GroupDescription: Security Group for Generic Chatbot lambda
        GroupName: !Sub ${AWS::StackName}-sg
        VpcId: !Ref VpcId
      
      
    LambdaFunctionRole:
        Type: AWS::IAM::Role
        Properties:
          RoleName: !Sub ${AWS::StackName}-${AWS::Region}-lambda-role
          Tags:
            - Key: map-migrated
              Value: !Ref MapMigrationTag
          AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Principal:
                  Service:
                    - lambda.amazonaws.com
                Action:
                  - sts:AssumeRole
          Path: /
          ManagedPolicyArns:
            - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole 
            - !Ref LogPolicy
            - !Ref SecretPolicy

    SecretPolicy:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        ManagedPolicyName: !Sub ${AWS::StackName}-${AWS::Region}-secret-policy
        Path: /
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource:  !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${SecretName}-${Environment}-*"

    LogPolicy:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        ManagedPolicyName: !Sub ${AWS::StackName}-${AWS::Region}-log-policy
        Path: /
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}*

    

    CheckSubscriptionFunction:
      Type: AWS::Serverless::Function
      Properties:
        FunctionName: check_subscription
        CodeUri: functions/check_subscription/
        Handler: app.handler
        Runtime: python3.10
        Architectures:
          - x86_64
        Timeout: 30  
        Environment:
          Variables:
            Region: !Ref AWS::Region
            Secret_Name: !Sub "${SecretName}-${Environment}"
        Role:
          !GetAtt LambdaFunctionRole.Arn
    
    
    DeleteSubscriptionFunction:
      Type: AWS::Serverless::Function
      Properties:
        FunctionName: delete_subscription
        CodeUri: functions/delete_subscription/
        Handler: app.handler
        Runtime: python3.10
        Architectures:
          - x86_64
        Timeout: 30  
        Environment:
          Variables:
            Region: !Ref AWS::Region
            Secret_Name: !Sub "${SecretName}-${Environment}"
        Role:
          !GetAtt LambdaFunctionRole.Arn

      
    RenewSubscriptionFunction:
      Type: AWS::Serverless::Function
      Properties:
        FunctionName: renew_subscription
        CodeUri: functions/renew_subscription/
        Handler: app.handler
        Runtime: python3.10
        Architectures:
          - x86_64
        Timeout: 30  
        Environment:
          Variables:
            Region: !Ref AWS::Region
            Secret_Name: !Sub "${SecretName}-${Environment}"
        Role:
          !GetAtt LambdaFunctionRole.Arn
        Events:
          NotificationPost:
            Type: Api
            Properties:
              Path: /lifecycleNotifications
              Method: POST
              RestApiId: !Ref ApiGateway
          NotificationGet:
            Type: Api
            Properties:
              Path: /lifecycleNotifications
              Method: GET
              RestApiId: !Ref ApiGateway
        VpcConfig:
          SecurityGroupIds:
              - !GetAtt GenericChatbotSecurityGroup.GroupId
          SubnetIds: !Ref Subnet
